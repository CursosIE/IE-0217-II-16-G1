public class TicTacToe {
 
    int[][] matrix;							-->Declaracion variable: 1
 
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        matrix = new int[n][n];						-->Declarando puntero doble: 1
    }
 
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or -1.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                -1: Player 2 wins. */
    int move(int row, int col, int player) {
        matrix[row][col]=player;					-->Inicializacion: 1

        //check row
        boolean win=true;						-->Declarando e inicializando: 1 + 1
        for(int i=0; i<matrix.length; i++){				for: n + n + n
            if(matrix[row][i]!=player){					if: n + n + n
                win=false;						Inicializacion: 1
                break;							Instruccion: 1				--> 3n * (3n + 2)
            }
        }
 
        if(win) return player;						-->Cumple condicion: 2
 
        //check column
        win=true;							-->Inicializacion: 1
        for(int i=0; i<matrix.length; i++){				for: n + n + n
            if(matrix[i][col]!=player){					if: n + n + n
                win=false;						Inicializacion: 1
                break;							Instruccion: 1				--> 3n * (3n + 2)
            }
        }
 
        if(win) return player;						-->Cumple condicion: 2
 
        //check back diagonal
        win=true;							-->Inicializacion: 1
        for(int i=0; i<matrix.length; i++){				for: n + n + n
            if(matrix[i][i]!=player){					if: n + n + n
                win=false;						Inicializacion: 1
                break;							Instruccion: 1				--> 3n * (3n + 2)
            }
        }
 
        if(win) return player;						-->Cumple condicion: 2
 
        //check forward diagonal
        win=true;							-->Inicializacion: 1
        for(int i=0; i<matrix.length; i++){				for: n + n + n
            if(matrix[i][matrix.length-i-1]!=player){			if: n + n + n
                win=false;						Inicializacion: 1
                break;							Instruccion: 1				--> 3n * (3n + 2)
            }
        }
 
        if(win) return player;						-->Cumple condicion: 2
 
        return 0;							-->Instruccion: 1
    }
    
    int main()
    {
        int player = -1;						-->Declaracion e Inicializacion: 1 + 1
        
        boolean end = false;						-->Declaracion e Inicializacion: 1 + 1
        
        int n = 3;							-->Declaracion e Inicializacion: 1 + 1
        int r, c, result;						-->Declaracion: 1 + 1 + 1
        
        TicTacToe ttt = new TicTacToe(n);				-->Declarando puntero: 1
        while(!end)							-->Cumple condicion: k
        {
            player *= -1						Acceso y multiplicacion: 1 + 1
            r =  randomInt(0, 3);					Inicializacion: 1 + 1
            c =  randomInt(0, 3);					Inicializacion: 1 + 1
            
            result = move(player, r, c);				Accesos y funcion: 1 + 1 + 1 + 1
            if(result != 0)						Comparacion: k #Donde k es el tiempo de la funcion 'move', k = 36*n**2 + 24*n + 15
            {
                print("player " + result + " won.");			Impresion: 1 + 1
                end = true;						Inicializacion: 1			--> k * (k + 13)
            }
        }
        return 0;							Instruccion: 1
    }
}
