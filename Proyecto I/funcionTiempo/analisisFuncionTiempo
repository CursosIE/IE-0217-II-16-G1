/* NumeroVertices: V; NumeroAristas: E

ANÁLISIS DE LA FUNCIÓN DE TIEMPO */


/*Por convencion el vertice de inicio de arista, es la fila del verice en la matriz*/


int verticeInicio(int pesoBuscado, int** matrizAdyacencia, int ordenMatriz){
  for(int fila = 1; fila < ordenMatriz; fila++){											
    for(int columna = 0; columna < fila; columna++){										
      if (matrizAdyacencia[fila][columna] == pesoBuscado) return fila; }			
  }
  return 0;																								
}																				


/* verticeInicio: Tiene dos for hasta la cantidad de Vertices (9V), un if 
que en accesos a memoria, asignaciones y retornar, dura tiempo constante 4, return 1

 Tiempo : 3V*3V*(4)+1 = 36VV + 1

*/


/*Por convencion el vertice de final de arista, es la columna del verice en la matriz*/

int verticeFinal(int pesoBuscado, int** matrizAdyacencia, int ordenMatriz){
  for(int fila = 1; fila < ordenMatriz; fila++){
    for(int columna = 0; columna < fila; columna++){
      if (matrizAdyacencia[fila][columna] == pesoBuscado) return columna;
    }
  }
  return 0;
}							


/* verticeFinal: Tiene dos for hasta la cantidad de Vertices (9V), un if 
que en accesos a memoria, asignaciones y retornar, dura tiempo constante 4, return 1

 Tiempo : 3V*3V*(4)+1 = 36VV + 1

*/

/*Metodo de inicializacion, el padre es si mismo*/
void MakeSet(int numVertices, int padre[]) {
  for(int vertice = 0; vertice < numVertices; ++vertice) padre[vertice] = vertice;
}																							

/* MakeSet: Tiene un for hasta la cantidad de Vertices (3V)
Un acceso a memoria, y una asignacion (3)

 Tiempo : 3V*3 = 9V

*/

/*Metodo para encontrar la raiz del vertice actual*/						
int Find(int vertice, int padre[]){		
  if(vertice == padre[vertice]) return vertice;								If: 4
  else return Find(padre[vertice], padre);									retornar 1*(V-1)
  return 0;																				retornar 1
}																							FuncionFind: V+4

/*ESTE METODO ES RECURSIVO 
Mientras no se cumpla el if, el else se repite (V-1) veces en el peor caso. 
Luego el if dura (4).  
Return (1)

 Tiempo : (V-1) + 4 + 1 = V + 4

*/


/*Metodo para determinar si 2 vertices pertenecen al mismo arbol */

bool sameTree(int verticePrimero, int verticeSegundo, int padre[]){
  if(Find(verticePrimero, padre) == Find(verticeSegundo, padre)) return true;			Tiempo: V+4 +V+4 + 1 +1
  return false;
}																					

/* Hace un llamado dos llamados a Find : 2*(V+4), compara y retorna: 

	Tiempo : 2V + 10

*/


/*Metodo para unir 2 vertices*/								

void Union(int verticePrimero, int verticeSegundo, int padre[]) {
  int verticePrimeroRaiz = Find(verticePrimero, padre);
  int verticeSegundoRaiz = Find(verticeSegundo, padre);
  padre[verticePrimeroRaiz] = verticeSegundoRaiz;				
}

/* LLama a la funcion Find y la asigna en dos ocasiones 2 ( V + 4 ) + 2 + 2 + 2
  Tiempo: 2V+14
*/
																						
**********************************************************************************************

int kruskal(int cantVertices, int cantArista, char** argv, int** matrizAdyacencia){
  createGraph(argv, matrizAdyacencia);		

**********************************************************************************************

  /*Se crean arreglos para inicializar la estructura union-find y demas variables*/
  int padreVertice[cantVertices], aristaActual, verticeEntrada, verticeSalida;			
  int aristasNoNulas = 0;
  int countPesoArista = 0;																			

	/* iniciar y Asignar : 8 */ 

  for(int i = 0; i < cantArista; i++){																	
    if(atoi(argv[2 + i]) != 0) aristasNoNulas++;													

	/* For 3V , if dos accesos a memoria, asignacion y aumento: 4 
		
		tiempo: 12E */
  }

  int pesosAristas[aristasNoNulas];
  int arbolExpansionMinima[aristasNoNulas];															

	/* Inicializar : 2 */ 

  for (int i = 0; i < cantArista; i++) {																
    if (atoi(argv[2 + i]) != 0) {
      pesosAristas[countPesoArista] = atoi(argv[2 + i]);
      countPesoArista++;																					

	/* For 3V , if dos accesos y comparacion acceso y asignacion, aumentar: 8
		Tiempo : 24E 
	*/

    }
  }

  /*Se ordena los pesos y se define como raiz de cada verice como el mismo*/

  sort(pesosAristas, pesosAristas + aristasNoNulas);												

	/* Sort, complejidad:	Elog(E) */

  MakeSet(cantVertices, padreVertice);			

   /* Funcion: 9V */

  /*Para cada arista E que une los vertices U y V*/
  for (int arista = 0; arista < aristasNoNulas; arista++) { 	/*For: 3E*/
    aristaActual = pesosAristas[arista];
    if(aristaActual == 0) continue;														

   /*			Comp y acceso: 5 			*/

    verticeEntrada = verticeInicio(aristaActual, matrizAdyacencia, atoi(argv[1]));			

	/* Funcion y Asignación 36VV +1 +1 */

    verticeSalida = verticeFinal(aristaActual, matrizAdyacencia, atoi(argv[1]));	

	/* Funcion y Asignación : 36VV +1 +1 */

    /*Si los puntos U y V no estan en la misma componente, evitar ciclos cerrados*/
    if (not sameTree(verticeEntrada, verticeSalida, padreVertice)) {								

    /*  SameTree: 2V+9 */

      /*Agregar arista E al MST y se realiza la union de U y V*/
      arbolExpansionMinima[arista] = aristaActual;					

    /* Acceso y Asig: 3 */

      Union(verticeEntrada, verticeSalida, padreVertice);									

	 /* Union: 	2V+12 */

    }																											
    /*Para que no halla basura si una arista no es tomada en cuenta*/					
    else arbolExpansionMinima[arista] = 0;																

	 /*	Acceso y Asig: 2 */

  }																										
  return 0; 

********************************************************************************************
					   	IMPLEMENTACION DE KRUSKAL

-_-_-_-_-_-_-_-_-_-_-_-_Elog(E) +216VVE + 12VE + 195E + 9V + 10 -_-_-_-_-_-_-_-_-_-_-_-_-_-_

********************************************************************************************




